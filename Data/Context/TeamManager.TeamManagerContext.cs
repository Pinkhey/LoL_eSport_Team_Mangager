//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 05. 10. 16:44:08
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using TeamManagerContext;

namespace cnTeamManager
{

    public partial class TeamManagerContext : DbContext
    {

        public TeamManagerContext() :
            base()
        {
            OnCreated();
        }

        public TeamManagerContext(DbContextOptions<TeamManagerContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=localhost\SQLEXPRESS;Initial Catalog=TeamManager;Integrated Security=True;Persist Security Info=True;TrustServerCertificate=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Users> Users
        {
            get;
            set;
        }

        public virtual DbSet<Teams> Teams
        {
            get;
            set;
        }

        public virtual DbSet<Players> Players
        {
            get;
            set;
        }

        public virtual DbSet<Matches> Matches
        {
            get;
            set;
        }

        public virtual DbSet<PlayerStats> PlayerStats
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.UsersMapping(modelBuilder);
            this.CustomizeUsersMapping(modelBuilder);

            this.TeamsMapping(modelBuilder);
            this.CustomizeTeamsMapping(modelBuilder);

            this.PlayersMapping(modelBuilder);
            this.CustomizePlayersMapping(modelBuilder);

            this.MatchesMapping(modelBuilder);
            this.CustomizeMatchesMapping(modelBuilder);

            this.PlayerStatsMapping(modelBuilder);
            this.CustomizePlayerStatsMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Users Mapping

        private void UsersMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Users>().ToTable(@"Users");
            modelBuilder.Entity<Users>().Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Users>().Property(x => x.Username).HasColumnName(@"Username").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Users>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Users>().Property(x => x.IsAdmin).HasColumnName(@"IsAdmin").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Users>().HasKey(@"UserId");
            modelBuilder.Entity<Users>().HasIndex(@"Username").IsUnique(true);
        }

        partial void CustomizeUsersMapping(ModelBuilder modelBuilder);

        #endregion

        #region Teams Mapping

        private void TeamsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Teams>().ToTable(@"Teams");
            modelBuilder.Entity<Teams>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Teams>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Teams>().Property(x => x.Region).HasColumnName(@"Region").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Teams>().Property(x => x.League).HasColumnName(@"League").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Teams>().Property(x => x.CoachId).HasColumnName(@"CoachId").ValueGeneratedNever();
            modelBuilder.Entity<Teams>().Property(x => x.LogoURL).HasColumnName(@"LogoURL").ValueGeneratedNever();
            modelBuilder.Entity<Teams>().HasKey(@"Id");
        }

        partial void CustomizeTeamsMapping(ModelBuilder modelBuilder);

        #endregion

        #region Players Mapping

        private void PlayersMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Players>().ToTable(@"Players");
            modelBuilder.Entity<Players>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Players>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Players>().Property(x => x.Role).HasColumnName(@"Role").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Players>().Property(x => x.TeamId).HasColumnName(@"TeamId").ValueGeneratedNever();
            modelBuilder.Entity<Players>().Property(x => x.PhotoURL).HasColumnName(@"PhotoURL").ValueGeneratedNever();
            modelBuilder.Entity<Players>().HasKey(@"Id");
        }

        partial void CustomizePlayersMapping(ModelBuilder modelBuilder);

        #endregion

        #region Matches Mapping

        private void MatchesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Matches>().ToTable(@"Matches");
            modelBuilder.Entity<Matches>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Matches>().Property(x => x.Date).HasColumnName(@"Date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Matches>().Property(x => x.TeamId).HasColumnName(@"TeamId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Matches>().Property(x => x.OpponentId).HasColumnName(@"OpponentId").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Matches>().Property(x => x.Result).HasColumnName(@"Result").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Matches>().HasKey(@"Id");
        }

        partial void CustomizeMatchesMapping(ModelBuilder modelBuilder);

        #endregion

        #region PlayerStats Mapping

        private void PlayerStatsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PlayerStats>().ToTable(@"PlayerStats");
            modelBuilder.Entity<PlayerStats>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<PlayerStats>().Property(x => x.MatchId).HasColumnName(@"MatchId").ValueGeneratedNever();
            modelBuilder.Entity<PlayerStats>().Property(x => x.PlayerId).HasColumnName(@"PlayerId").ValueGeneratedNever();
            modelBuilder.Entity<PlayerStats>().Property(x => x.KDA).HasColumnName(@"KDA").ValueGeneratedNever();
            modelBuilder.Entity<PlayerStats>().Property(x => x.Score).HasColumnName(@"Score").ValueGeneratedNever();
            modelBuilder.Entity<PlayerStats>().Property(x => x.Form).HasColumnName(@"Form").ValueGeneratedNever();
            modelBuilder.Entity<PlayerStats>().HasKey(@"Id");
        }

        partial void CustomizePlayerStatsMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Users>().HasOne(x => x.Teams).WithOne(op => op.Users).HasForeignKey(typeof(Teams), @"CoachId").IsRequired(false);

            modelBuilder.Entity<Teams>().HasMany(x => x.Players).WithOne(op => op.Teams).HasForeignKey(@"TeamId").IsRequired(true);
            modelBuilder.Entity<Teams>().HasMany(x => x.Matches).WithOne(op => op.Teams1).HasForeignKey(@"OpponentId").IsRequired(true);
            modelBuilder.Entity<Teams>().HasMany(x => x.Matches1).WithOne(op => op.Teams2).HasForeignKey(@"TeamId").IsRequired(true);

            modelBuilder.Entity<Players>().HasOne(x => x.Teams).WithMany(op => op.Players).HasForeignKey(@"TeamId").IsRequired(true);
            modelBuilder.Entity<Players>().HasMany(x => x.PlayerStats).WithOne(op => op.Players1).HasForeignKey(@"PlayerId").IsRequired(true);

            modelBuilder.Entity<Matches>().HasMany(x => x.PlayerStats).WithOne(op => op.Matches).HasForeignKey(@"MatchId").IsRequired(true);
            modelBuilder.Entity<Matches>().HasOne(x => x.Teams1).WithMany(op => op.Matches).HasForeignKey(@"OpponentId").IsRequired(true);
            modelBuilder.Entity<Matches>().HasOne(x => x.Teams2).WithMany(op => op.Matches1).HasForeignKey(@"TeamId").IsRequired(true);

            modelBuilder.Entity<PlayerStats>().HasOne(x => x.Matches).WithMany(op => op.PlayerStats).HasForeignKey(@"MatchId").IsRequired(true);
            modelBuilder.Entity<PlayerStats>().HasOne(x => x.Players1).WithMany(op => op.PlayerStats).HasForeignKey(@"PlayerId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
